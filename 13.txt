13. Create an adjacency list for graph and find its connected components using DFS.
#include <stdio.h>
#include <stdlib.h>
// Structure to represent a node in the adjacency list
struct Node {
 int vertex;
 struct Node* next;
};
// Structure to represent the adjacency list
struct AdjList {
 struct Node* head;
};
// Structure to represent a graph
struct Graph {
 int numVertices;
 struct AdjList* array;
};
// Function to create a new node with the given vertex
struct Node* createNode(int vertex) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->vertex = vertex;
 newNode->next = NULL;
 return newNode;
}
// Function to create a graph with a given number of vertices
struct Graph* createGraph(int numVertices) {
 struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
 graph->numVertices = numVertices;
 graph->array = (struct AdjList*)malloc(numVertices * sizeof(struct AdjList));
 for (int i = 0; i < numVertices; ++i) {
 graph->array[i].head = NULL;
 }
 return graph;
}
// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
 // Add an edge from src to dest
 struct Node* newNode = createNode(dest);
 newNode->next = graph->array[src].head;
 graph->array[src].head = newNode;
 // Add an edge from dest to src
 newNode = createNode(src);
 newNode->next = graph->array[dest].head;
 graph->array[dest].head = newNode;
}
// Function to perform Depth-First Search (DFS) traversal
void DFS(struct Graph* graph, int* visited, int currentVertex) {
 visited[currentVertex] = 1; // Mark the current vertex as visited
 printf("%d ", currentVertex);
 // Traverse the adjacent vertices of the current vertex
 struct Node* temp = graph->array[currentVertex].head;
 while (temp != NULL) {
 if (!visited[temp->vertex]) {
 DFS(graph, visited, temp->vertex);
 }
 temp = temp->next;
 }
}
// Function to find connected components in a graph
void findConnectedComponents(struct Graph* graph) {
 int* visited = (int*)malloc(graph->numVertices * sizeof(int));
 for (int i = 0; i < graph->numVertices; ++i) {
 visited[i] = 0; // Initialize all vertices as not visited
 }
 printf("Connected Components:\n");
 for (int i = 0; i < graph->numVertices; ++i) {
 if (!visited[i]) {
 DFS(graph, visited, i);
 printf("\n");
 }
 }
 free(visited);
}
// Function to free memory allocated for the graph
void freeGraph(struct Graph* graph) {
 for (int i = 0; i < graph->numVertices; ++i) {
 struct Node* current = graph->array[i].head;
 while (current != NULL) {
 struct Node* next = current->next;
 free(current);
 current = next;
 }
 }
 free(graph->array);
 free(graph);
}
int main() {
 // Create a graph with 7 vertices
 struct Graph* graph = createGraph(7);
 // Add edges to the graph
 addEdge(graph, 0, 1);
 addEdge(graph, 0, 2);
 addEdge(graph, 1, 3);
 addEdge(graph, 2, 4);
 addEdge(graph, 5, 6);
 // Find and print connected components in the graph
 findConnectedComponents(graph);
 // Free memory allocated for the graph
 freeGraph(graph);
 return 0;
}



