9. WAP program to create binary tree and traverse the tree using Inorder, PreOrder, Post Order
Traversing Technique.
#include <stdio.h>
#include <stdlib.h>
// Structure to represent a node in the binary tree
struct TreeNode {
 int data;
 struct TreeNode* left;
 struct TreeNode* right;
};
// Function to create a new node with the given data
struct TreeNode* createNode(int data) {
 struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
 newNode->data = data;
 newNode->left = NULL;
 newNode->right = NULL;
 return newNode;
}
// Function to insert a node into the binary tree
struct TreeNode* insertNode(struct TreeNode* root, int data) {
 if (root == NULL) {
 return createNode(data);
 }
 if (data < root->data) {
 root->left = insertNode(root->left, data);
 } else if (data > root->data) {
 root->right = insertNode(root->right, data);
 }
 return root;
}
// Inorder traversal of the binary tree
void inorderTraversal(struct TreeNode* root) {
 if (root != NULL) {
 inorderTraversal(root->left);
 printf("%d ", root->data);
 inorderTraversal(root->right);
 }
}
// Preorder traversal of the binary tree
void preorderTraversal(struct TreeNode* root) {
 if (root != NULL) {
 printf("%d ", root->data);
 preorderTraversal(root->left);
 preorderTraversal(root->right);
 }
}
// Postorder traversal of the binary tree
void postorderTraversal(struct TreeNode* root) {
 if (root != NULL) {
 postorderTraversal(root->left);
 postorderTraversal(root->right);
 printf("%d ", root->data);
 }
}
int main() {
 // Create a binary tree
 struct TreeNode* root = NULL;
 root = insertNode(root, 50);
 insertNode(root, 30);
 insertNode(root, 70);
 insertNode(root, 20);
 insertNode(root, 40);
 insertNode(root, 60);
 insertNode(root, 80);
 // Traverse the binary tree using different techniques
 printf("Inorder Traversal: ");
 inorderTraversal(root);
 printf("\n");
 printf("Preorder Traversal: ");
 preorderTraversal(root);
 printf("\n");
 printf("Postorder Traversal: ");
 postorderTraversal(root);
 printf("\n");
 // Free the memory allocated for the binary tree (optional)
 // You may want to implement a proper tree deletion function if needed
 return 0;
}


