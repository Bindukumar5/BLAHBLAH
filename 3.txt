3. Consider two linked list A of size N. Write a program to Split the linked list two parts i.e. B and C
each of size N/2.
#include <stdio.h>
#include <stdlib.h>
// Node structure for a linked list
struct Node {
 int data;
 struct Node* next;
};
// Function to insert a new node at the end of a linked list
void insertNode(struct Node** head, int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->next = NULL;
 if (*head == NULL) {
 *head = newNode;
 } else {
 struct Node* temp = *head;
 while (temp->next != NULL) {
 temp = temp->next;
 }
 temp->next = newNode;
 }
}
// Function to split a linked list into two parts, B and C
void splitLinkedList(struct Node* A, struct Node** B, struct Node** C) {
 if (A == NULL || A->next == NULL) {
 // A has fewer than two nodes, cannot split
 *B = A;
 *C = NULL;
 return;
 }
 struct Node* slow = A;
 struct Node* fast = A->next;
 // Move 'fast' two steps and 'slow' one step at a time
 while (fast != NULL) {
 fast = fast->next;
 if (fast != NULL) {
 slow = slow->next;
 fast = fast->next;
 }
 }
 // 'slow' is at the middle of the list, split the list into B and C
 *B = A;
 *C = slow->next;
 slow->next = NULL;
}
// Function to print a linked list
void printList(struct Node* head) {
 while (head != NULL) {
 printf("%d ", head->data);
 head = head->next;
 }
 printf("\n");
}
int main() {
 // Sample linked list A
 struct Node* A = NULL;
 // Insert nodes into the linked list
 for (int i = 1; i <= 6; ++i) {
 insertNode(&A, i);
 }
 // Initialize linked lists B and C
 struct Node* B = NULL;
 struct Node* C = NULL;
 // Split the linked list A into B and C
 splitLinkedList(A, &B, &C);
 // Print the original and split lists
 printf("Original List: ");
 printList(A);
 printf("List B: ");
 printList(B);
 printf("List C: ");
 printList(C);
 return 0;
}



