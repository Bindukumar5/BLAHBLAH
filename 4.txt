4. Write a program to create a single linked list. The address of the head is to be stored in a separate
structure which has two fields
struct head {
 struct node *head_ptr;
 int num;
};
The head_ptr will store the pointer to the head node num: Is the count of the number of elements
present in the linked list. Write implementations for insertion and deletion which will update the
head structure appropriately

#include <stdio.h>
#include <stdlib.h>
// Node structure for a linked list
struct Node {
 int data;
 struct Node* next;
};
// Head structure to store the head pointer and the count of elements
struct Head {
 struct Node* head_ptr;
 int num;
};
// Function to initialize the head structure
struct Head* initializeHead() {
 struct Head* head = (struct Head*)malloc(sizeof(struct Head));
 head->head_ptr = NULL;
 head->num = 0;
 return head;
}
// Function to insert a new node at the end of the linked list
void insertNode(struct Head* head, int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->next = NULL;
 if (head->head_ptr == NULL) {
 // If the list is empty, update head pointer
 head->head_ptr = newNode;
 } else {
 // Traverse the list to find the last node
 struct Node* temp = head->head_ptr;
 while (temp->next != NULL) {
 temp = temp->next;
 }
 temp->next = newNode;
 }
 // Update the count of elements
 head->num++;
}
// Function to delete a node with a given value from the linked list
void deleteNode(struct Head* head, int data) {
 if (head->head_ptr == NULL) {
 // List is empty, nothing to delete
 return;
 }
 struct Node* current = head->head_ptr;
 struct Node* prev = NULL;
 // Search for the node with the given data
 while (current != NULL && current->data != data) {
 prev = current;
 current = current->next;
 }
 if (current == NULL) {
 // Node with given data not found
 return;
 }
 // Update the links to skip the node to be deleted
 if (prev == NULL) {
 // If the node to be deleted is the first node
 head->head_ptr = current->next;
 } else {
 prev->next = current->next;
 }
 // Free the memory of the deleted node
 free(current);
 // Update the count of elements
 head->num--;
}
// Function to print the linked list
void printList(struct Head* head) {
 struct Node* temp = head->head_ptr;
 while (temp != NULL) {
 printf("%d ", temp->data);
 temp = temp->next;
 }
 printf("\n");
}
int main() {
 // Initialize the head structure
 struct Head* head = initializeHead();
 // Insert elements into the linked list
 insertNode(head, 1);
 insertNode(head, 2);
 insertNode(head, 3);
 // Print the initial linked list
 printf("Initial List: ");
 printList(head);
 // Delete an element from the linked list
 deleteNode(head, 2);
 // Print the modified linked list after deletion
 printf("List after deletion: ");
 printList(head);
 // Free the memory allocated for the head structure
 free(head);
 return 0;
}



