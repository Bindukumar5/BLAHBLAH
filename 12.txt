12. Create an adjacency matrix for graph and implement DFS.
#include <stdio.h>
#include <stdlib.h>
// Function to perform Depth-First Search (DFS) traversal
void DFS(int** adjMatrix, int* visited, int numVertices, int currentVertex) {
 printf("%d ", currentVertex);
 visited[currentVertex] = 1; // Mark the current vertex as visited
 // Traverse the adjacent vertices of the current vertex
 for (int i = 0; i < numVertices; ++i) {
 if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
 DFS(adjMatrix, visited, numVertices, i);
 }
 }
}
int main() {
 int numVertices;
 // Input the number of vertices in the graph
 printf("Enter the number of vertices in the graph: ");
 scanf("%d", &numVertices);
 // Create an adjacency matrix
 int** adjMatrix = (int**)malloc(numVertices * sizeof(int*));
 for (int i = 0; i < numVertices; ++i) {
 adjMatrix[i] = (int*)malloc(numVertices * sizeof(int));
 }
 // Input the adjacency matrix
 printf("Enter the adjacency matrix:\n");
 for (int i = 0; i < numVertices; ++i) {
 for (int j = 0; j < numVertices; ++j) {
 scanf("%d", &adjMatrix[i][j]);
 }
 }
 // Create an array to keep track of visited vertices
 int* visited = (int*)malloc(numVertices * sizeof(int));
 for (int i = 0; i < numVertices; ++i) {
 visited[i] = 0; // Initialize all vertices as not visited
 }
 // Perform DFS traversal starting from vertex 0
 printf("DFS Traversal starting from vertex 0: ");
 DFS(adjMatrix, visited, numVertices, 0);
 printf("\n");
 // Free memory allocated for the adjacency matrix and visited array
 for (int i = 0; i < numVertices; ++i) {
 free(adjMatrix[i]);
 }
 free(adjMatrix);
 free(visited);
 return 0;
}


