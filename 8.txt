8. Write a program to insert N Student information into the Doubly Linked List. Write a function to
a. Search a Student and display his details.
b. Display the details of the students who have scored above 90 in Mathâ€™s and Science.
#include <stdio.h>
#include <stdlib.h>
// Structure to represent a student
struct Student {
 int rollNumber;
 char name[50];
 float mathScore;
 float scienceScore;
 struct Student* prev;
 struct Student* next;
};
// Function to insert a student into the doubly linked list
void insertStudent(struct Student** head, int rollNumber, const char* name, float mathScore, float
scienceScore) {
 struct Student* newStudent = (struct Student*)malloc(sizeof(struct Student));
 newStudent->rollNumber = rollNumber;
 strcpy(newStudent->name, name);
 newStudent->mathScore = mathScore;
 newStudent->scienceScore = scienceScore;
 newStudent->prev = NULL;
 newStudent->next = NULL;
 if (*head == NULL) {
 *head = newStudent;
 } else {
 struct Student* temp = *head;
 while (temp->next != NULL) {
 temp = temp->next;
 }
 temp->next = newStudent;
 newStudent->prev = temp;
 }
}
// Function to search for a student by roll number and display details
void searchStudent(struct Student* head, int rollNumber) {
 struct Student* current = head;
 while (current != NULL) {
 if (current->rollNumber == rollNumber) {
 printf("Student Found!\n");
 printf("Roll Number: %d\n", current->rollNumber);
 printf("Name: %s\n", current->name);
 printf("Math Score: %.2f\n", current->mathScore);
 printf("Science Score: %.2f\n", current->scienceScore);
 return;
 }
 current = current->next;
 }
 printf("Student with Roll Number %d not found.\n", rollNumber);
}
// Function to display details of students who scored above 90 in Math and Science
void displayHighScorers(struct Student* head) {
 struct Student* current = head;
 printf("Students who scored above 90 in Math and Science:\n");
 while (current != NULL) {
 if (current->mathScore > 90 && current->scienceScore > 90) {
 printf("Roll Number: %d\n", current->rollNumber);
 printf("Name: %s\n", current->name);
 printf("Math Score: %.2f\n", current->mathScore);
 printf("Science Score: %.2f\n", current->scienceScore);
 printf("\n");
 }
 current = current->next;
 }
}
// Function to display details of all students in the doubly linked list
void displayAllStudents(struct Student* head) {
 struct Student* current = head;
 while (current != NULL) {
 printf("Roll Number: %d\n", current->rollNumber);
 printf("Name: %s\n", current->name);
 printf("Math Score: %.2f\n", current->mathScore);
 printf("Science Score: %.2f\n", current->scienceScore);
 printf("\n");
 current = current->next;
 }
}
// Function to free memory allocated for the doubly linked list
void freeStudents(struct Student* head) {
 struct Student* current = head;
 while (current != NULL) {
 struct Student* next = current->next;
 free(current);
 current = next;
 }
}
int main() {
 struct Student* students = NULL;
 // Insert N student information into the doubly linked list
 insertStudent(&students, 1, "John", 95.5, 92.0);
 insertStudent(&students, 2, "Alice", 88.0, 94.5);
 insertStudent(&students, 3, "Bob", 90.0, 91.5);
 // Add more students as needed
 // Search for a student by roll number and display details
 searchStudent(students, 2);
 // Display details of students who scored above 90 in Math and Science
 displayHighScorers(students);
 // Display details of all students
 displayAllStudents(students);
 // Free memory allocated for the doubly linked list
 freeStudents(students);
 return 0;
}



