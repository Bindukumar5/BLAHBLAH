11. Create an adjacency list for graph and implement BFS.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// Structure to represent a node in the adjacency list
struct Node {
 int vertex;
 struct Node* next;
};
// Structure to represent the adjacency list
struct AdjList {
 struct Node* head;
};
// Structure to represent a graph
struct Graph {
 int numVertices;
 struct AdjList* array;
};
// Function to create a new node with the given vertex
struct Node* createNode(int vertex) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->vertex = vertex;
 newNode->next = NULL;
 return newNode;
}
// Function to create a graph with a given number of vertices
struct Graph* createGraph(int numVertices) {
 struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
 graph->numVertices = numVertices;
 graph->array = (struct AdjList*)malloc(numVertices * sizeof(struct AdjList));
 for (int i = 0; i < numVertices; ++i) {
 graph->array[i].head = NULL;
 }
 return graph;
}
// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
 // Add an edge from src to dest
 struct Node* newNode = createNode(dest);
 newNode->next = graph->array[src].head;
 graph->array[src].head = newNode;
 // Add an edge from dest to src
 newNode = createNode(src);
 newNode->next = graph->array[dest].head;
 graph->array[dest].head = newNode;
}
// Function to perform Breadth-First Search (BFS) traversal
void BFS(struct Graph* graph, int startVertex) {
 // Create a boolean array to keep track of visited vertices
 bool* visited = (bool*)malloc(graph->numVertices * sizeof(bool));
 for (int i = 0; i < graph->numVertices; ++i) {
 visited[i] = false;
 }
 // Create a queue for BFS
 int* queue = (int*)malloc(graph->numVertices * sizeof(int));
 int front = -1, rear = -1;
 // Enqueue the start vertex and mark it as visited
 queue[++rear] = startVertex;
 visited[startVertex] = true;
 // Perform BFS
 while (front != rear) {
 int currentVertex = queue[++front];
 printf("%d ", currentVertex);
 // Traverse the adjacent vertices of the current vertex
 struct Node* temp = graph->array[currentVertex].head;
 while (temp != NULL) {
 int adjacentVertex = temp->vertex;
 if (!visited[adjacentVertex]) {
 // Enqueue the adjacent vertex and mark it as visited
 queue[++rear] = adjacentVertex;
 visited[adjacentVertex] = true;
 }
 temp = temp->next;
 }
 }
 // Free the memory allocated for the boolean array and queue
 free(visited);
 free(queue);
}
// Function to free memory allocated for the graph
void freeGraph(struct Graph* graph) {
 for (int i = 0; i < graph->numVertices; ++i) {
 struct Node* current = graph->array[i].head;
 while (current != NULL) {
 struct Node* next = current->next;
 free(current);
 current = next;
 }
 }
 free(graph->array);
 free(graph);
}
int main() {
 // Create a graph with 5 vertices
 struct Graph* graph = createGraph(5);
 // Add edges to the graph
 addEdge(graph, 0, 1);
 addEdge(graph, 0, 4);
 addEdge(graph, 1, 2);
 addEdge(graph, 1, 3);
 addEdge(graph, 1, 4);
 addEdge(graph, 2, 3);
 addEdge(graph, 3, 4);
 // Perform BFS traversal starting from vertex 0
 printf("BFS Traversal starting from vertex 0: ");
 BFS(graph, 0);
 printf("\n");
 // Free memory allocated for the graph
 freeGraph(graph);
 return 0;
}


